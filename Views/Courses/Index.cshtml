@model IEnumerable<Course>
@using ZA_PLACE.Helpers

@{
    Layout = "~/Views/Shared/AdminDashboard.cshtml";
    ViewData["Title"] = "Courses Dashboard";
}
<link rel="stylesheet" href="~/css/Components.css" asp-append-version="true" />

<!-- new Course -->
@if (User.IsInRole(clsRoles.roleTeacher))
{
<div class="CoursesComponent">
    <a asp-controller="Courses" asp-action="CreateCourses"><i class='bx bx-plus-circle'></i></a>
    <div class="NewCoursesText">
        Create Course
    </div>
</div>    
}

<!-- Older Courses -->
<div class="courses-content">
    @foreach (var item in Model)
    {
        <div class="card" style="width: 18rem;">
            <img src="@Url.Content(item.CourseImagePath)" class="img-fluid rounded-start" alt="Course Image">
            <div class="card-body">
                <h5 class="card-title">@item.CourseName</h5>
                <p class="card-text">@item.CourseDescription</p>
                @if (User.IsInRole(clsRoles.roleAdmin))
                {
                    @if (item.CourseStatus == true)
                    {
                        <button class="btn btn-outline-success" onclick="changeStatus('@item.CourseId', true)">Active</button>
                    }
                    else
                    {
                        <button class="btn btn-outline-danger" onclick="changeStatus('@item.CourseId', false)">Not-Active</button>
                    }
                }
                @if (User.IsInRole(clsRoles.roleAdmin) || User.IsInRole(clsRoles.roleTeacher))
                {
                    <!-- Edit Course -->
                    <button type="button" class="btn btn-success" onclick="window.location.href='@Url.Action("EditCourses", "Courses", new { id = item.CourseId })'">
                        <i class='bx bxs-edit-alt'></i>
                    </button>
                    <!-- Delete Course -->
                    <button type="button" class="btn btn-danger" onclick="confirmDelete('@item.CourseId')">
                        <i class='bx bxs-trash'></i>
                    </button>
                }
                <!-- Go To Course -->
                <a onclick="window.location.href='@Url.Action("CoursePage", "Courses", new { id = item.CourseId })'" class="btn btn-primary custom-btn">Go To Course</a>
            </div>
        </div>
    }
</div>

<form id="csrf-form" method="post">
    @Html.AntiForgeryToken()
</form>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script type="text/javascript">
    function confirmDelete(courseId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "This action cannot be undone!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(`/Course/DeleteCourse/${courseId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token // Include CSRF token
                }
            })
            .then(async (response) => {
                if (response.ok) {
                    Swal.fire(
                        'Deleted!',
                        'The course has been deleted.',
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                } else {
                    const errorText = await response.text();  // Capture error response
                    Swal.fire(
                        'Error!',
                        `An error occurred while deleting the course: ${errorText}`,
                        'error'
                    );
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire(
                    'Error!',
                    'An unexpected error occurred.',
                    'error'
                );
            });
        }
    });
}
</script>
<script type="text/javascript">
    function changeStatus(courseId, currentStatus) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You are about to change the status of this course.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, change it!'
        }).then((result) => {
            if (result.isConfirmed) {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch('/Course/ChangeStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        CourseId: courseId,
                        Status: !currentStatus // Toggle the status
                    })
                })
                    .then(async response => {
                        if (response.ok) {
                            Swal.fire(
                                'Updated!',
                                'Course status has been updated.',
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        } else {
                            const errorText = await response.text();
                            Swal.fire(
                                'Error!',
                                `An error occurred while updating the status: ${errorText}`,
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'An unexpected error occurred.',
                            'error'
                        );
                    });
            }
        });
    }
</script>